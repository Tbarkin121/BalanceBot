
BalanceBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006238  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a0  080064a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  080064b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080064b8  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a3  00000000  00000000  00035602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ebc  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001115c  00000000  00000000  0006277c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24cf  00000000  00000000  000738d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165da7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036fc  00000000  00000000  00165df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063f8 	.word	0x080063f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080063f8 	.word	0x080063f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b974 	b.w	8000e14 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468e      	mov	lr, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14d      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4694      	mov	ip, r2
 8000b56:	d969      	bls.n	8000c2c <__udivmoddi4+0xe8>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b152      	cbz	r2, 8000b74 <__udivmoddi4+0x30>
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	f1c2 0120 	rsb	r1, r2, #32
 8000b66:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b72:	4094      	lsls	r4, r2
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	0c21      	lsrs	r1, r4, #16
 8000b7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7e:	fa1f f78c 	uxth.w	r7, ip
 8000b82:	fb08 e316 	mls	r3, r8, r6, lr
 8000b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8a:	fb06 f107 	mul.w	r1, r6, r7
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9a:	f080 811f 	bcs.w	8000ddc <__udivmoddi4+0x298>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 811c 	bls.w	8000ddc <__udivmoddi4+0x298>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 f707 	mul.w	r7, r0, r7
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x92>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc8:	f080 810a 	bcs.w	8000de0 <__udivmoddi4+0x29c>
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	f240 8107 	bls.w	8000de0 <__udivmoddi4+0x29c>
 8000bd2:	4464      	add	r4, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	1be4      	subs	r4, r4, r7
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa4>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xc2>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	f000 80ef 	beq.w	8000dd6 <__udivmoddi4+0x292>
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f683 	clz	r6, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d14a      	bne.n	8000ca4 <__udivmoddi4+0x160>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd4>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80f9 	bhi.w	8000e0a <__udivmoddi4+0x2c6>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	469e      	mov	lr, r3
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa4>
 8000c26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xec>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 8092 	bne.w	8000d5e <__udivmoddi4+0x21a>
 8000c3a:	eba1 010c 	sub.w	r1, r1, ip
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	0c20      	lsrs	r0, r4, #16
 8000c4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c56:	fb0e f003 	mul.w	r0, lr, r3
 8000c5a:	4288      	cmp	r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x12c>
 8000c5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x12a>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2c0>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	1a09      	subs	r1, r1, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c78:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x156>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x154>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2ca>
 8000c98:	4608      	mov	r0, r1
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca2:	e79c      	b.n	8000bde <__udivmoddi4+0x9a>
 8000ca4:	f1c6 0720 	rsb	r7, r6, #32
 8000ca8:	40b3      	lsls	r3, r6
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	40f9      	lsrs	r1, r7
 8000cbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cca:	0c20      	lsrs	r0, r4, #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b8>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4461      	add	r1, ip
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d04:	fb09 1110 	mls	r1, r9, r0, r1
 8000d08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	458e      	cmp	lr, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1e2>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2b4>
 8000d1e:	458e      	cmp	lr, r1
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2b4>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2e:	eba1 010e 	sub.w	r1, r1, lr
 8000d32:	42a1      	cmp	r1, r4
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46a6      	mov	lr, r4
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x2a4>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x2a0>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x212>
 8000d3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d42:	eb61 010e 	sbc.w	r1, r1, lr
 8000d46:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4e:	40f1      	lsrs	r1, r6
 8000d50:	431f      	orrs	r7, r3
 8000d52:	e9c5 7100 	strd	r7, r1, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	40d8      	lsrs	r0, r3
 8000d64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d68:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	4301      	orrs	r1, r0
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d80:	0c0b      	lsrs	r3, r1, #16
 8000d82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d86:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8a:	429e      	cmp	r6, r3
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x260>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b8>
 8000d9c:	429e      	cmp	r6, r3
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b8>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	1b9b      	subs	r3, r3, r6
 8000da6:	b289      	uxth	r1, r1
 8000da8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dac:	fb07 3316 	mls	r3, r7, r6, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb06 f30e 	mul.w	r3, r6, lr
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x28a>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000dca:	3e02      	subs	r6, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0x104>
 8000dd6:	462e      	mov	r6, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e705      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	e6e3      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6f8      	b.n	8000bd6 <__udivmoddi4+0x92>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f8>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df0:	3801      	subs	r0, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f8>
 8000df4:	4646      	mov	r6, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x28a>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1e2>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x260>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b8>
 8000e04:	3b02      	subs	r3, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x12c>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e709      	b.n	8000c22 <__udivmoddi4+0xde>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x156>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e22:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6493      	str	r3, [r2, #72]	; 0x48
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6493      	str	r3, [r2, #72]	; 0x48
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_DMA_Init+0x50>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200b      	movs	r0, #11
 8000e54:	f001 f931 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e58:	200b      	movs	r0, #11
 8000e5a:	f001 f948 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e72:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <MX_FDCAN1_Init+0x8c>)
 8000e74:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ea4:	220b      	movs	r2, #11
 8000ea6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000eaa:	2249      	movs	r2, #73	; 0x49
 8000eac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000eb0:	220b      	movs	r2, #11
 8000eb2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 8;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 8;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 8;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ec8:	2208      	movs	r2, #8
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_FDCAN1_Init+0x88>)
 8000ee0:	f001 fc52 	bl	8002788 <HAL_FDCAN_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eea:	f000 fcf1 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000028 	.word	0x20000028
 8000ef8:	40006400 	.word	0x40006400

08000efc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09e      	sub	sp, #120	; 0x78
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2254      	movs	r2, #84	; 0x54
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 fa63 	bl	80063e8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <HAL_FDCAN_MspInit+0xbc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d141      	bne.n	8000fb0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa33 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f48:	f000 fcc2 	bl	80018d0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_FDCAN_MspInit+0xc0>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f8e:	2309      	movs	r3, #9
 8000f90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f002 fa5e 	bl	800345c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2015      	movs	r0, #21
 8000fa6:	f001 f888 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000faa:	2015      	movs	r0, #21
 8000fac:	f001 f89f 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3778      	adds	r7, #120	; 0x78
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40006400 	.word	0x40006400
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_GPIO_Init+0xd4>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <MX_GPIO_Init+0xd4>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_GPIO_Init+0xd4>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f002 fb8f 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001048:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	480f      	ldr	r0, [pc, #60]	; (8001098 <MX_GPIO_Init+0xd8>)
 800105a:	f002 f9ff 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800105e:	2320      	movs	r3, #32
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f002 f9f0 	bl	800345c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f001 f81a 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001086:	2028      	movs	r0, #40	; 0x28
 8001088:	f001 f831 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800

0800109c <_ZN3IMU4initEv>:
#include <stdio.h>
#include <cstring>
#include "math.h"

void IMU::init()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	IMU::reset();
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f8f9 	bl	800129c <_ZN3IMU5resetEv>
	c_filter.tau = 0.01;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <_ZN3IMU4initEv+0x3c>)
 80010ae:	601a      	str	r2, [r3, #0]
	first_loop = true;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dt_clip = 1.0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
	ACC_FS = 2;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	GYRO_FS = 250;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	22fa      	movs	r2, #250	; 0xfa
 80010cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35


}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	3c23d70a 	.word	0x3c23d70a

080010dc <_ZN3IMU20complimentary_updateEv>:


void IMU::complimentary_update()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	c_filter.prev_time = c_filter.curr_time;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
	c_filter.curr_time = sample.ms_counter;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	621a      	str	r2, [r3, #32]
	c_filter.dt = (float)(c_filter.curr_time - c_filter.prev_time)/1000.0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001298 <_ZN3IMU20complimentary_updateEv+0x1bc>
 800110a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	// Protection
	if(c_filter.dt > dt_clip || first_loop)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	dc04      	bgt.n	8001134 <_ZN3IMU20complimentary_updateEv+0x58>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <_ZN3IMU20complimentary_updateEv+0x68>
	{
		c_filter.dt = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
		first_loop = false;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	c_filter.alpha = c_filter.tau/(c_filter.tau + c_filter.dt);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 6a00 	vldr	s13, [r3]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	ed93 7a00 	vldr	s14, [r3]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a01 	vstr	s15, [r3, #4]
	// Low Pass Accel
	c_filter.acc_ang = atan2f((float)sample.acc_x, (float)sample.acc_z) * rad2deg;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001174:	ee07 3a10 	vmov	s14, r3
 8001178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800117c:	eef0 0a47 	vmov.f32	s1, s14
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f004 ff8e 	bl	80060a4 <atan2f>
 8001188:	eeb0 7a40 	vmov.f32	s14, s0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edc3 7a02 	vstr	s15, [r3, #8]
	c_filter.acc_ang_lp =(1-c_filter.alpha)*c_filter.acc_ang + (c_filter.alpha)*c_filter.acc_ang_lp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80011c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edc3 7a03 	vstr	s15, [r3, #12]
	// High Pass Gyro
	c_filter.gyro_ang_prev = c_filter.gyro_ang;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	615a      	str	r2, [r3, #20]
	c_filter.gyro_ang = c_filter.ang_est + sample.gyro_y*c_filter.dt/1000; // Divide by 1000 because gyro units in mili-dps
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011f2:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8001298 <_ZN3IMU20complimentary_updateEv+0x1bc>
 80011f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edc3 7a04 	vstr	s15, [r3, #16]
	c_filter.gyro_ang_hp = (1-c_filter.alpha)*c_filter.gyro_ang_hp + (1-c_filter.alpha)*(c_filter.gyro_ang - c_filter.gyro_ang_prev);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a01 	vldr	s15, [r3, #4]
 800120a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800120e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a06 	vldr	s15, [r3, #24]
 8001218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001226:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	ed93 6a04 	vldr	s12, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edd3 7a05 	vldr	s15, [r3, #20]
 8001236:	ee76 7a67 	vsub.f32	s15, s12, s15
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edc3 7a06 	vstr	s15, [r3, #24]

	c_filter.ang_est = (1-c_filter.alpha)*(c_filter.ang_est + c_filter.gyro_ang_hp * c_filter.dt) + (c_filter.alpha * c_filter.acc_ang_lp);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	edd3 7a01 	vldr	s15, [r3, #4]
 800124e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edd3 6a07 	vldr	s13, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	ed93 6a06 	vldr	s12, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001268:	ee66 7a27 	vmul.f32	s15, s12, s15
 800126c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edd3 6a01 	vldr	s13, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	447a0000 	.word	0x447a0000

0800129c <_ZN3IMU5resetEv>:

void IMU::reset()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	memset( &sample, 0, sizeof( sample ) );
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	333c      	adds	r3, #60	; 0x3c
 80012a8:	221c      	movs	r2, #28
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 f89b 	bl	80063e8 <memset>
    memset( &c_filter, 0, sizeof( c_filter ) );
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	222c      	movs	r2, #44	; 0x2c
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 f895 	bl	80063e8 <memset>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_ZN3IMU9get_angleEv>:

float IMU::get_angle()
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return c_filter.ang_est;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	ee07 3a90 	vmov	s15, r3
}
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	eef0 7ae7 	vabs.f32	s15, s15
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZN3IMUC1Ev>:
  uint32_t curr_time;
  uint32_t prev_time;
  float dt;
} Complimentary_Filter;

class IMU {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <_ZN3IMUC1Ev+0x1c>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	42652ee6 	.word	0x42652ee6

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f000 fd58 	bl	8001dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 fa2f 	bl	8001790 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f7ff fe45 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001336:	f7ff fd6f 	bl	8000e18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800133a:	f000 fbc5 	bl	8001ac8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800133e:	f000 fc0d 	bl	8001b5c <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8001342:	f7ff fd93 	bl	8000e6c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 28);
 8001346:	221c      	movs	r2, #28
 8001348:	49ae      	ldr	r1, [pc, #696]	; (8001604 <main+0x2e0>)
 800134a:	48af      	ldr	r0, [pc, #700]	; (8001608 <main+0x2e4>)
 800134c:	f003 faca 	bl	80048e4 <HAL_UART_Receive_DMA>



  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001350:	4bae      	ldr	r3, [pc, #696]	; (800160c <main+0x2e8>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8001356:	4bad      	ldr	r3, [pc, #692]	; (800160c <main+0x2e8>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800135c:	4bab      	ldr	r3, [pc, #684]	; (800160c <main+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001362:	4baa      	ldr	r3, [pc, #680]	; (800160c <main+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001368:	4ba8      	ldr	r3, [pc, #672]	; (800160c <main+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x0;
 800136e:	4ba7      	ldr	r3, [pc, #668]	; (800160c <main+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001374:	49a5      	ldr	r1, [pc, #660]	; (800160c <main+0x2e8>)
 8001376:	48a6      	ldr	r0, [pc, #664]	; (8001610 <main+0x2ec>)
 8001378:	f001 fb60 	bl	8002a3c <HAL_FDCAN_ConfigFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf14      	ite	ne
 8001382:	2301      	movne	r3, #1
 8001384:	2300      	moveq	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <main+0x6c>
  {
    /* Filter configuration Error */
    Error_Handler();
 800138c:	f000 faa0 	bl	80018d0 <Error_Handler>
  }
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8001390:	489f      	ldr	r0, [pc, #636]	; (8001610 <main+0x2ec>)
 8001392:	f001 fbad 	bl	8002af0 <HAL_FDCAN_Start>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <main+0x86>
  {
	  Error_Handler();
 80013a6:	f000 fa93 	bl	80018d0 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80013aa:	2200      	movs	r2, #0
 80013ac:	2101      	movs	r1, #1
 80013ae:	4898      	ldr	r0, [pc, #608]	; (8001610 <main+0x2ec>)
 80013b0:	f001 fce4 	bl	8002d7c <HAL_FDCAN_ActivateNotification>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <main+0xa4>
  {
    /* Notification Error */
    Error_Handler();
 80013c4:	f000 fa84 	bl	80018d0 <Error_Handler>
  }
  TxHeader.Identifier = 0x200;
 80013c8:	4b92      	ldr	r3, [pc, #584]	; (8001614 <main+0x2f0>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80013d0:	4b90      	ldr	r3, [pc, #576]	; (8001614 <main+0x2f0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80013d6:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <main+0x2f0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80013dc:	4b8d      	ldr	r3, [pc, #564]	; (8001614 <main+0x2f0>)
 80013de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013e2:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80013e4:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <main+0x2f0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013ea:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <main+0x2f0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <main+0x2f0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013f6:	4b87      	ldr	r3, [pc, #540]	; (8001614 <main+0x2f0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80013fc:	4b85      	ldr	r3, [pc, #532]	; (8001614 <main+0x2f0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]

	current1 = 0.0;
 8001402:	4b85      	ldr	r3, [pc, #532]	; (8001618 <main+0x2f4>)
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
	current2 = 0.0;
 800140a:	4b84      	ldr	r3, [pc, #528]	; (800161c <main+0x2f8>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
	float target_vel1 = 0.0;
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
	float target_vel2 = 0.0;
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
	int16_t current_word1 = 0.0;
 800141e:	2300      	movs	r3, #0
 8001420:	827b      	strh	r3, [r7, #18]
	int16_t current_word2 = 0.0;
 8001422:	2300      	movs	r3, #0
 8001424:	823b      	strh	r3, [r7, #16]

	float kp_gain = 0.0002;
 8001426:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <main+0x2fc>)
 8001428:	60fb      	str	r3, [r7, #12]
	float ki_gain = 0.000;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
	float kd_gain = 0.01;
 8001430:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <main+0x300>)
 8001432:	607b      	str	r3, [r7, #4]
	float max_current = 3.0;
 8001434:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <main+0x304>)
 8001436:	603b      	str	r3, [r7, #0]
	motor1.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 8001438:	edd7 1a00 	vldr	s3, [r7]
 800143c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001440:	edd7 0a02 	vldr	s1, [r7, #8]
 8001444:	ed97 0a03 	vldr	s0, [r7, #12]
 8001448:	4878      	ldr	r0, [pc, #480]	; (800162c <main+0x308>)
 800144a:	f000 fa65 	bl	8001918 <_ZN5Motor8PID_InitEffff>
	motor2.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 800144e:	edd7 1a00 	vldr	s3, [r7]
 8001452:	ed97 1a01 	vldr	s2, [r7, #4]
 8001456:	edd7 0a02 	vldr	s1, [r7, #8]
 800145a:	ed97 0a03 	vldr	s0, [r7, #12]
 800145e:	4874      	ldr	r0, [pc, #464]	; (8001630 <main+0x30c>)
 8001460:	f000 fa5a 	bl	8001918 <_ZN5Motor8PID_InitEffff>
	imu.init();
 8001464:	4873      	ldr	r0, [pc, #460]	; (8001634 <main+0x310>)
 8001466:	f7ff fe19 	bl	800109c <_ZN3IMU4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  P = .03;
 800146a:	4b73      	ldr	r3, [pc, #460]	; (8001638 <main+0x314>)
 800146c:	4a73      	ldr	r2, [pc, #460]	; (800163c <main+0x318>)
 800146e:	601a      	str	r2, [r3, #0]
  I = 0.0006;
 8001470:	4b73      	ldr	r3, [pc, #460]	; (8001640 <main+0x31c>)
 8001472:	4a74      	ldr	r2, [pc, #464]	; (8001644 <main+0x320>)
 8001474:	601a      	str	r2, [r3, #0]
  D = 0.01;
 8001476:	4b74      	ldr	r3, [pc, #464]	; (8001648 <main+0x324>)
 8001478:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <main+0x300>)
 800147a:	601a      	str	r2, [r3, #0]
  I_accum = 0.0;
 800147c:	4b73      	ldr	r3, [pc, #460]	; (800164c <main+0x328>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  d_error = 0.0;
 8001484:	4b72      	ldr	r3, [pc, #456]	; (8001650 <main+0x32c>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
  while (1)
  {
	if(rec_flag)
 800148c:	4b71      	ldr	r3, [pc, #452]	; (8001654 <main+0x330>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 810b 	beq.w	80016ac <main+0x388>
	{
		imu.complimentary_update();
 8001496:	4867      	ldr	r0, [pc, #412]	; (8001634 <main+0x310>)
 8001498:	f7ff fe20 	bl	80010dc <_ZN3IMU20complimentary_updateEv>
		if(abs(imu.get_angle()) < 45)
 800149c:	4865      	ldr	r0, [pc, #404]	; (8001634 <main+0x310>)
 800149e:	f7ff ff12 	bl	80012c6 <_ZN3IMU9get_angleEv>
 80014a2:	eef0 7a40 	vmov.f32	s15, s0
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	f7ff ff1b 	bl	80012e4 <_ZSt3absf>
 80014ae:	eef0 7a40 	vmov.f32	s15, s0
 80014b2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001658 <main+0x334>
 80014b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	bf4c      	ite	mi
 80014c0:	2301      	movmi	r3, #1
 80014c2:	2300      	movpl	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80e8 	beq.w	800169c <main+0x378>
		{
			error_prev = error;
 80014cc:	4b63      	ldr	r3, [pc, #396]	; (800165c <main+0x338>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a63      	ldr	r2, [pc, #396]	; (8001660 <main+0x33c>)
 80014d2:	6013      	str	r3, [r2, #0]
			error = imu.get_angle();
 80014d4:	4857      	ldr	r0, [pc, #348]	; (8001634 <main+0x310>)
 80014d6:	f7ff fef6 	bl	80012c6 <_ZN3IMU9get_angleEv>
 80014da:	eef0 7a40 	vmov.f32	s15, s0
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <main+0x338>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]
			I_accum += error;
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <main+0x328>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <main+0x338>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <main+0x328>)
 80014f6:	edc3 7a00 	vstr	s15, [r3]
			d_error = error-error_prev;
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <main+0x338>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	4b57      	ldr	r3, [pc, #348]	; (8001660 <main+0x33c>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <main+0x32c>)
 800150c:	edc3 7a00 	vstr	s15, [r3]
			float vel_targ = error*P + I_accum*I + d_error*D;
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <main+0x338>)
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <main+0x314>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <main+0x328>)
 8001522:	edd3 6a00 	vldr	s13, [r3]
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <main+0x31c>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <main+0x32c>)
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	4b43      	ldr	r3, [pc, #268]	; (8001648 <main+0x324>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a07 	vstr	s15, [r7, #28]
//			current1 = motor1.PID_Controller(vel_targ);
//			current2 = motor2.PID_Controller(-vel_targ);
			if(abs(vel_targ) > 1.5)
 800154c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001550:	f7ff fec8 	bl	80012e4 <_ZSt3absf>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800155c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	bfcc      	ite	gt
 8001566:	2301      	movgt	r3, #1
 8001568:	2300      	movle	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00c      	beq.n	800158a <main+0x266>
			{
				if(vel_targ > 0)
 8001570:	edd7 7a07 	vldr	s15, [r7, #28]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd03      	ble.n	8001586 <main+0x262>
				{
					vel_targ = 1.5;
 800157e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	e001      	b.n	800158a <main+0x266>
				}
				else
				{
					vel_targ = -1.5;
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <main+0x340>)
 8001588:	61fb      	str	r3, [r7, #28]
				}
			}
			if(abs(I_accum) > 0.5/I)
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <main+0x328>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	f7ff fea6 	bl	80012e4 <_ZSt3absf>
 8001598:	ee10 3a10 	vmov	r3, s0
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff9f 	bl	80004e0 <__aeabi_f2d>
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <main+0x31c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff98 	bl	80004e0 <__aeabi_f2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <main+0x344>)
 80015ba:	f7ff f913 	bl	80007e4 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	2101      	movs	r1, #1
 80015c4:	460e      	mov	r6, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff fa71 	bl	8000ab0 <__aeabi_dcmpgt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <main+0x2b4>
 80015d4:	2300      	movs	r3, #0
 80015d6:	461e      	mov	r6, r3
 80015d8:	b2f3      	uxtb	r3, r6
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d050      	beq.n	8001680 <main+0x35c>
			{
				if(I_accum > 0)
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <main+0x328>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd3e      	ble.n	800166c <main+0x348>
				{
					I_accum = 0.5/I;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <main+0x31c>)
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <main+0x328>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
 8001602:	e03d      	b.n	8001680 <main+0x35c>
 8001604:	20000090 	.word	0x20000090
 8001608:	200002a0 	.word	0x200002a0
 800160c:	200000b0 	.word	0x200000b0
 8001610:	20000028 	.word	0x20000028
 8001614:	200000c8 	.word	0x200000c8
 8001618:	200001ec 	.word	0x200001ec
 800161c:	200001f0 	.word	0x200001f0
 8001620:	3951b717 	.word	0x3951b717
 8001624:	3c23d70a 	.word	0x3c23d70a
 8001628:	40400000 	.word	0x40400000
 800162c:	20000124 	.word	0x20000124
 8001630:	2000015c 	.word	0x2000015c
 8001634:	20000194 	.word	0x20000194
 8001638:	200001fc 	.word	0x200001fc
 800163c:	3cf5c28f 	.word	0x3cf5c28f
 8001640:	20000200 	.word	0x20000200
 8001644:	3a1d4952 	.word	0x3a1d4952
 8001648:	20000204 	.word	0x20000204
 800164c:	20000208 	.word	0x20000208
 8001650:	2000020c 	.word	0x2000020c
 8001654:	2000008c 	.word	0x2000008c
 8001658:	42340000 	.word	0x42340000
 800165c:	200001f4 	.word	0x200001f4
 8001660:	200001f8 	.word	0x200001f8
 8001664:	bfc00000 	.word	0xbfc00000
 8001668:	3fe00000 	.word	0x3fe00000
				}
				else
				{
					I_accum = -0.5/I;
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <main+0x440>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <main+0x444>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
				}
			}
			current1 = vel_targ;
 8001680:	4a3a      	ldr	r2, [pc, #232]	; (800176c <main+0x448>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	6013      	str	r3, [r2, #0]
			current2 = -vel_targ;
 8001686:	edd7 7a07 	vldr	s15, [r7, #28]
 800168a:	eef1 7a67 	vneg.f32	s15, s15
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <main+0x44c>)
 8001690:	edc3 7a00 	vstr	s15, [r3]
			rec_flag=0;
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <main+0x450>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <main+0x388>
		}
		else
		{
			current1 = 0;
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <main+0x448>)
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
			current2 = 0;
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <main+0x44c>)
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
		}

	}

	current_word1 = (int16_t)(current1/20.0*16384);
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <main+0x448>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff15 	bl	80004e0 <__aeabi_f2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <main+0x454>)
 80016bc:	f7ff f892 	bl	80007e4 <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0x458>)
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9f3 	bl	8000ac4 <__aeabi_d2iz>
 80016de:	4603      	mov	r3, r0
 80016e0:	827b      	strh	r3, [r7, #18]
	current_word2 = (int16_t)(current2/20.0*16384);
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <main+0x44c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <main+0x454>)
 80016f2:	f7ff f877 	bl	80007e4 <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <main+0x458>)
 8001704:	f7fe ff44 	bl	8000590 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f9d8 	bl	8000ac4 <__aeabi_d2iz>
 8001714:	4603      	mov	r3, r0
 8001716:	823b      	strh	r3, [r7, #16]
	TxData[0] = current_word1 >> 8;
 8001718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800171c:	121b      	asrs	r3, r3, #8
 800171e:	b21b      	sxth	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <main+0x45c>)
 8001724:	701a      	strb	r2, [r3, #0]
	TxData[1] = (int8_t)(current_word1 & 0x00ff);
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <main+0x45c>)
 800172c:	705a      	strb	r2, [r3, #1]
	TxData[2] = current_word2 >> 8;
 800172e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001732:	121b      	asrs	r3, r3, #8
 8001734:	b21b      	sxth	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <main+0x45c>)
 800173a:	709a      	strb	r2, [r3, #2]
	TxData[3] = (int8_t)(current_word2 & 0x00ff);
 800173c:	8a3b      	ldrh	r3, [r7, #16]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <main+0x45c>)
 8001742:	70da      	strb	r2, [r3, #3]



	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)!= HAL_OK)
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <main+0x45c>)
 8001746:	490f      	ldr	r1, [pc, #60]	; (8001784 <main+0x460>)
 8001748:	480f      	ldr	r0, [pc, #60]	; (8001788 <main+0x464>)
 800174a:	f001 f9f9 	bl	8002b40 <HAL_FDCAN_AddMessageToTxFifoQ>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
	{
//		Error_Handler();
	}
	HAL_Delay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f000 fbb4 	bl	8001ec0 <HAL_Delay>
	loop_count++;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <main+0x468>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <main+0x468>)
 8001760:	6013      	str	r3, [r2, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001762:	e693      	b.n	800148c <main+0x168>
 8001764:	20000200 	.word	0x20000200
 8001768:	20000208 	.word	0x20000208
 800176c:	200001ec 	.word	0x200001ec
 8001770:	200001f0 	.word	0x200001f0
 8001774:	2000008c 	.word	0x2000008c
 8001778:	40340000 	.word	0x40340000
 800177c:	40d00000 	.word	0x40d00000
 8001780:	20000114 	.word	0x20000114
 8001784:	200000c8 	.word	0x200000c8
 8001788:	20000028 	.word	0x20000028
 800178c:	200000ac 	.word	0x200000ac

08001790 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fe22 	bl	80063e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f002 f810 	bl	80037d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c6:	2302      	movs	r3, #2
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017d2:	2355      	movs	r3, #85	; 0x55
 80017d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f8aa 	bl	8003940 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80017fc:	f000 f868 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001800:	230f      	movs	r3, #15
 8001802:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001804:	2303      	movs	r3, #3
 8001806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2104      	movs	r1, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fba9 	bl	8003f70 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800182e:	f000 f84f 	bl	80018d0 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	; 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
//  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_0);  // toggle PA0
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001850:	b4b0      	push	{r4, r5, r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	memcpy(&imu.sample.ms_counter, &UART1_rxBuffer, sizeof(imu.sample));
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_UART_RxCpltCallback+0x30>)
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_UART_RxCpltCallback+0x34>)
 800185c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8001860:	4615      	mov	r5, r2
 8001862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001866:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rec_flag = 1;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_UART_RxCpltCallback+0x38>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 28);

}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bcb0      	pop	{r4, r5, r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000194 	.word	0x20000194
 8001884:	20000090 	.word	0x20000090
 8001888:	2000008c 	.word	0x2000008c

0800188c <HAL_FDCAN_RxFifo0Callback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <HAL_FDCAN_RxFifo0Callback+0x32>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_FDCAN_RxFifo0Callback+0x40>)
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f001 f98e 	bl	8002bc8 <HAL_FDCAN_GetRxMessage>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
    {
    /* Reception Error */
//    Error_Handler();
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f001 fa61 	bl	8002d7c <HAL_FDCAN_ActivateNotification>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
    {
      /* Notification Error */
//      Error_Handler();
    }
  }
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000011c 	.word	0x2000011c
 80018cc:	200000ec 	.word	0x200000ec

080018d0 <Error_Handler>:
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d102      	bne.n	80018fc <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80018f8:	f7ff fd04 	bl	8001304 <_ZN3IMUC1Ev>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000194 	.word	0x20000194

08001908 <_GLOBAL__sub_I_rec_flag>:
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
 800190c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff ffe3 	bl	80018dc <_Z41__static_initialization_and_destruction_0ii>
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN5Motor8PID_InitEffff>:
	Kp = kp;
	Ki = ki;
	Kd = kd;
}
void Motor::PID_Init(float kp, float ki, float kd, float out_thresh)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6178      	str	r0, [r7, #20]
 8001920:	ed87 0a04 	vstr	s0, [r7, #16]
 8001924:	edc7 0a03 	vstr	s1, [r7, #12]
 8001928:	ed87 1a02 	vstr	s2, [r7, #8]
 800192c:	edc7 1a01 	vstr	s3, [r7, #4]
	Kp = kp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	621a      	str	r2, [r3, #32]
	Ki = ki;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	61da      	str	r2, [r3, #28]
	Kd = kd;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	619a      	str	r2, [r3, #24]
	A0 = Kp + Ki + Kd;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	ed93 7a08 	vldr	s14, [r3, #32]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	edd3 7a07 	vldr	s15, [r3, #28]
 800194e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	edd3 7a06 	vldr	s15, [r3, #24]
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	edc3 7a00 	vstr	s15, [r3]
	A1 = (-Kp ) - (2 * Kd );
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	edd3 7a08 	vldr	s15, [r3, #32]
 8001968:	eeb1 7a67 	vneg.f32	s14, s15
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001972:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	edc3 7a01 	vstr	s15, [r3, #4]
	A2 = Kd;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	609a      	str	r2, [r3, #8]
	pid_state[0] = 0.0;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
	pid_state[1] = 0.0;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
	pid_state[2] = 0.0;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
	output = 0.0;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
	output_threshold = out_thresh;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_MspInit+0x44>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_MspInit+0x44>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	; 0x60
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_MspInit+0x44>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_MspInit+0x44>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_MspInit+0x44>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_MspInit+0x44>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019f2:	f001 ff95 	bl	8003920 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a50:	f000 fa18 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Channel1_IRQHandler+0x10>)
 8001a5e:	f000 fd44 	bl	80024ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000330 	.word	0x20000330

08001a6c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <FDCAN1_IT0_IRQHandler+0x10>)
 8001a72:	f001 fa69 	bl	8002f48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000028 	.word	0x20000028

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f002 ff83 	bl	8004990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002a0 	.word	0x200002a0

08001a94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a9c:	f001 fe78 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <MX_LPUART1_UART_Init+0x90>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b0c:	f002 fe9a 	bl	8004844 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b16:	f7ff fedb 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b1e:	f004 f9f7 	bl	8005f10 <HAL_UARTEx_SetTxFifoThreshold>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b28:	f7ff fed2 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b30:	f004 fa2c 	bl	8005f8c <HAL_UARTEx_SetRxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b3a:	f7ff fec9 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	f004 f9ad 	bl	8005e9e <HAL_UARTEx_DisableFifoMode>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b4a:	f7ff fec1 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000210 	.word	0x20000210
 8001b58:	40008000 	.word	0x40008000

08001b5c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <MX_USART1_UART_Init+0x94>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba6:	f002 fe4d 	bl	8004844 <HAL_UART_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f7ff fe8e 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bb8:	f004 f9aa 	bl	8005f10 <HAL_UARTEx_SetTxFifoThreshold>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc2:	f7ff fe85 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bca:	f004 f9df 	bl	8005f8c <HAL_UARTEx_SetRxFifoThreshold>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f7ff fe7c 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bda:	f004 f960 	bl	8005e9e <HAL_UARTEx_DisableFifoMode>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001be4:	f7ff fe74 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200002a0 	.word	0x200002a0
 8001bf0:	40013800 	.word	0x40013800

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0a0      	sub	sp, #128	; 0x80
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	2254      	movs	r2, #84	; 0x54
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fbe7 	bl	80063e8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_UART_MspInit+0x180>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d137      	bne.n	8001c94 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c24:	2320      	movs	r3, #32
 8001c26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fbb9 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7ff fe48 	bl	80018d0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c80:	230c      	movs	r3, #12
 8001c82:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f001 fbe5 	bl	800345c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c92:	e06b      	b.n	8001d6c <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <HAL_UART_MspInit+0x188>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d166      	bne.n	8001d6c <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca6:	f107 0318 	add.w	r3, r7, #24
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fb7c 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001cb6:	f7ff fe0b 	bl	80018d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_UART_MspInit+0x184>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cea:	2330      	movs	r3, #48	; 0x30
 8001cec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d02:	4619      	mov	r1, r3
 8001d04:	481e      	ldr	r0, [pc, #120]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001d06:	f001 fba9 	bl	800345c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001d0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d12:	2218      	movs	r2, #24
 8001d14:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d36:	2220      	movs	r2, #32
 8001d38:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d40:	4810      	ldr	r0, [pc, #64]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d42:	f000 f9ef 	bl	8002124 <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8001d4c:	f7ff fdc0 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d54:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2025      	movs	r0, #37	; 0x25
 8001d62:	f000 f9aa 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d66:	2025      	movs	r0, #37	; 0x25
 8001d68:	f000 f9c1 	bl	80020ee <HAL_NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3780      	adds	r7, #128	; 0x80
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40008000 	.word	0x40008000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	48000800 	.word	0x48000800
 8001d84:	20000330 	.word	0x20000330
 8001d88:	40020008 	.word	0x40020008

08001d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <LoopForever+0xe>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <LoopForever+0x16>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001db6:	f7ff fe75 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f004 faf1 	bl	80063a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dbe:	f7ff fab1 	bl	8001324 <main>

08001dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc2:	e7fe      	b.n	8001dc2 <LoopForever>
  ldr   r0, =_estack
 8001dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dd0:	080064ac 	.word	0x080064ac
  ldr r2, =_sbss
 8001dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dd8:	20000394 	.word	0x20000394

08001ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_2_IRQHandler>

08001dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de8:	2003      	movs	r0, #3
 8001dea:	f000 f95b 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 f80e 	bl	8001e10 <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	e001      	b.n	8001e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e00:	f7ff fddc 	bl	80019bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e04:	79fb      	ldrb	r3, [r7, #7]

}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_InitTick+0x68>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d022      	beq.n	8001e6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_InitTick+0x6c>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_InitTick+0x68>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f966 	bl	800210a <HAL_SYSTICK_Config>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10f      	bne.n	8001e64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	d809      	bhi.n	8001e5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	f000 f932 	bl	80020ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_InitTick+0x70>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e004      	b.n	8001e6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e001      	b.n	8001e6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_IncTick+0x1c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <HAL_IncTick+0x1c>)
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	20000390 	.word	0x20000390
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000390 	.word	0x20000390

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d004      	beq.n	8001ee4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_Delay+0x40>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee4:	bf00      	nop
 8001ee6:	f7ff ffdf 	bl	8001ea8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d8f7      	bhi.n	8001ee6 <HAL_Delay+0x26>
  {
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000008 	.word	0x20000008

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e08d      	b.n	8002252 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_DMA_Init+0x138>)
 800213e:	429a      	cmp	r2, r3
 8002140:	d80f      	bhi.n	8002162 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	4b45      	ldr	r3, [pc, #276]	; (8002260 <HAL_DMA_Init+0x13c>)
 800214a:	4413      	add	r3, r2
 800214c:	4a45      	ldr	r2, [pc, #276]	; (8002264 <HAL_DMA_Init+0x140>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	009a      	lsls	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a42      	ldr	r2, [pc, #264]	; (8002268 <HAL_DMA_Init+0x144>)
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
 8002160:	e00e      	b.n	8002180 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <HAL_DMA_Init+0x148>)
 800216a:	4413      	add	r3, r2
 800216c:	4a3d      	ldr	r2, [pc, #244]	; (8002264 <HAL_DMA_Init+0x140>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <HAL_DMA_Init+0x14c>)
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa76 	bl	80026c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e0:	d102      	bne.n	80021e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d010      	beq.n	8002228 <HAL_DMA_Init+0x104>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b04      	cmp	r3, #4
 800220c:	d80c      	bhi.n	8002228 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa96 	bl	8002740 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e008      	b.n	800223a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020407 	.word	0x40020407
 8002260:	bffdfff8 	.word	0xbffdfff8
 8002264:	cccccccd 	.word	0xcccccccd
 8002268:	40020000 	.word	0x40020000
 800226c:	bffdfbf8 	.word	0xbffdfbf8
 8002270:	40020400 	.word	0x40020400

08002274 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_DMA_Start_IT+0x20>
 8002290:	2302      	movs	r3, #2
 8002292:	e066      	b.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d155      	bne.n	8002354 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f9bb 	bl	8002648 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 020e 	orr.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e00f      	b.n	800230c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 020a 	orr.w	r2, r2, #10
 800230a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002328:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002340:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e005      	b.n	8002360 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d005      	beq.n	800238e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2204      	movs	r2, #4
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e037      	b.n	80023fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 020e 	bic.w	r2, r2, #14
 800239c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f003 021f 	and.w	r2, r3, #31
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d00d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e047      	b.n	80024e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800249c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
    }
  }
  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2204      	movs	r2, #4
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d026      	beq.n	8002564 <HAL_DMA_IRQHandler+0x7a>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d021      	beq.n	8002564 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2104      	movs	r1, #4
 800254c:	fa01 f202 	lsl.w	r2, r1, r2
 8002550:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d071      	beq.n	800263e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002562:	e06c      	b.n	800263e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	2202      	movs	r2, #2
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02e      	beq.n	80025d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d029      	beq.n	80025d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020a 	bic.w	r2, r2, #10
 800259e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2102      	movs	r1, #2
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d038      	beq.n	800263e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025d4:	e033      	b.n	800263e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2208      	movs	r2, #8
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d025      	beq.n	8002640 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 020e 	bic.w	r2, r2, #14
 8002602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800263e:	bf00      	nop
 8002640:	bf00      	nop
}
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800265e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002670:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f003 021f 	and.w	r2, r3, #31
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d108      	bne.n	80026a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026a6:	e007      	b.n	80026b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d802      	bhi.n	80026de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e001      	b.n	80026e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3b08      	subs	r3, #8
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40020407 	.word	0x40020407
 8002730:	40020800 	.word	0x40020800
 8002734:	40020820 	.word	0x40020820
 8002738:	cccccccd 	.word	0xcccccccd
 800273c:	40020880 	.word	0x40020880

08002740 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a08      	ldr	r2, [pc, #32]	; (8002784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002762:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3b01      	subs	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2201      	movs	r2, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	1000823f 	.word	0x1000823f
 8002784:	40020940 	.word	0x40020940

08002788 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e147      	b.n	8002a2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fba4 	bl	8000efc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0210 	bic.w	r2, r2, #16
 80027c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff fb70 	bl	8001ea8 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80027ca:	e012      	b.n	80027f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80027cc:	f7ff fb6c 	bl	8001ea8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d90b      	bls.n	80027f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2203      	movs	r2, #3
 80027ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e11b      	b.n	8002a2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d0e5      	beq.n	80027cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7ff fb4a 	bl	8001ea8 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002816:	e012      	b.n	800283e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002818:	f7ff fb46 	bl	8001ea8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0f5      	b.n	8002a2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0e5      	beq.n	8002818 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0202 	orr.w	r2, r2, #2
 800285a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_FDCAN_Init+0x2ac>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d103      	bne.n	800286e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002866:	4a74      	ldr	r2, [pc, #464]	; (8002a38 <HAL_FDCAN_Init+0x2b0>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7c1b      	ldrb	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	e007      	b.n	8002898 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002896:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7c5b      	ldrb	r3, [r3, #17]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d108      	bne.n	80028b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ae:	619a      	str	r2, [r3, #24]
 80028b0:	e007      	b.n	80028c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7c9b      	ldrb	r3, [r3, #18]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d8:	619a      	str	r2, [r3, #24]
 80028da:	e007      	b.n	80028ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002910:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0210 	bic.w	r2, r2, #16
 8002920:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0204 	orr.w	r2, r2, #4
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	e02c      	b.n	8002996 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d028      	beq.n	8002996 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d01c      	beq.n	8002986 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d110      	bne.n	8002996 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	619a      	str	r2, [r3, #24]
 8002984:	e007      	b.n	8002996 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	3b01      	subs	r3, #1
 800299c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ca:	d115      	bne.n	80029f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	3b01      	subs	r3, #1
 80029d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	3b01      	subs	r3, #1
 80029e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80029f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80029f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fc3c 	bl	800328c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40006400 	.word	0x40006400
 8002a38:	40006500 	.word	0x40006500

08002a3c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a4c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d002      	beq.n	8002a5a <HAL_FDCAN_ConfigFilter+0x1e>
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d13d      	bne.n	8002ad6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a6e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002a76:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e01d      	b.n	8002ad2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	075a      	lsls	r2, r3, #29
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	079a      	lsls	r2, r3, #30
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e006      	b.n	8002ae4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d110      	bne.n	8002b26 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e006      	b.n	8002b34 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d12c      	bne.n	8002bb2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e023      	b.n	8002bc0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fbe8 	bl	8003364 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e006      	b.n	8002bc0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb6:	f043 0208 	orr.w	r2, r3, #8
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b08b      	sub	sp, #44	; 0x2c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bdc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002bde:	7efb      	ldrb	r3, [r7, #27]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f040 80bc 	bne.w	8002d5e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d121      	bne.n	8002c30 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0af      	b.n	8002d6c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e020      	b.n	8002c72 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e08d      	b.n	8002d6c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e005      	b.n	8002ca2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0e1b      	lsrs	r3, r3, #24
 8002cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0fda      	lsrs	r2, r3, #31
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	3304      	adds	r3, #4
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	e00a      	b.n	8002d2c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	440b      	add	r3, r1
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	461a      	mov	r2, r3
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d3eb      	bcc.n	8002d16 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d105      	bne.n	8002d50 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002d4e:	e004      	b.n	8002d5a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e006      	b.n	8002d6c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	f043 0208 	orr.w	r2, r3, #8
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	372c      	adds	r7, #44	; 0x2c
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	08006428 	.word	0x08006428

08002d7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d8e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d003      	beq.n	8002d9e <HAL_FDCAN_ActivateNotification+0x22>
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f040 80c8 	bne.w	8002f2e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03b      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d031      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d027      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d13b      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d131      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d127      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11d      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0202 	orr.w	r2, r2, #2
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e006      	b.n	8002f3c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4013      	ands	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002fa2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fba:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f92e 	bl	800324e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d014      	beq.n	8003038 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003016:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8ec 	bl	8003210 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8b6 	bl	80031ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fc14 	bl	800188c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003072:	69f9      	ldr	r1, [r7, #28]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8ab 	bl	80031d0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8a0 	bl	80031e6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01a      	beq.n	80030ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030ca:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f888 	bl	80031fa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f888 	bl	8003226 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800313a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f87c 	bl	800323a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003166:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f876 	bl	8003276 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f858 	bl	8003262 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80031b2:	bf00      	nop
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003296:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2f      	ldr	r2, [pc, #188]	; (800335c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d103      	bne.n	80032aa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80032a8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80032ba:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	041a      	lsls	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	061a      	lsls	r2, r3, #24
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e005      	b.n	800333e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3304      	adds	r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3f3      	bcc.n	8003332 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	4000a400 	.word	0x4000a400
 800335c:	40006800 	.word	0x40006800
 8003360:	40006c00 	.word	0x40006c00

08003364 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003382:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800338a:	4313      	orrs	r3, r2
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e00a      	b.n	80033a6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003398:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800339e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80033a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033a4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033b0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80033b6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80033bc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	440b      	add	r3, r1
 80033d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3304      	adds	r3, #4
 80033e2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	3304      	adds	r3, #4
 80033ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e020      	b.n	8003438 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3303      	adds	r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3302      	adds	r3, #2
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	440b      	add	r3, r1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800340e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3301      	adds	r3, #1
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	440b      	add	r3, r1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800341c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	440a      	add	r2, r1
 8003424:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003426:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	3304      	adds	r3, #4
 8003430:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3304      	adds	r3, #4
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	4a06      	ldr	r2, [pc, #24]	; (8003458 <FDCAN_CopyMessageToRAM+0xf4>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	461a      	mov	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4293      	cmp	r3, r2
 8003448:	d3d5      	bcc.n	80033f6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	3724      	adds	r7, #36	; 0x24
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	08006428 	.word	0x08006428

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800346a:	e15a      	b.n	8003722 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 814c 	beq.w	800371c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003498:	2b02      	cmp	r3, #2
 800349a:	d130      	bne.n	80034fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d2:	2201      	movs	r2, #1
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0201 	and.w	r2, r3, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d017      	beq.n	800353a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d123      	bne.n	800358e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	6939      	ldr	r1, [r7, #16]
 800358a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80a6 	beq.w	800371c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d0:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_GPIO_Init+0x2e4>)
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	4a5a      	ldr	r2, [pc, #360]	; (8003740 <HAL_GPIO_Init+0x2e4>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6613      	str	r3, [r2, #96]	; 0x60
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_GPIO_Init+0x2e4>)
 80035de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035e8:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_GPIO_Init+0x2e8>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003612:	d01f      	beq.n	8003654 <HAL_GPIO_Init+0x1f8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a4c      	ldr	r2, [pc, #304]	; (8003748 <HAL_GPIO_Init+0x2ec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d019      	beq.n	8003650 <HAL_GPIO_Init+0x1f4>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a4b      	ldr	r2, [pc, #300]	; (800374c <HAL_GPIO_Init+0x2f0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_GPIO_Init+0x1f0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <HAL_GPIO_Init+0x2f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00d      	beq.n	8003648 <HAL_GPIO_Init+0x1ec>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a49      	ldr	r2, [pc, #292]	; (8003754 <HAL_GPIO_Init+0x2f8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <HAL_GPIO_Init+0x1e8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a48      	ldr	r2, [pc, #288]	; (8003758 <HAL_GPIO_Init+0x2fc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_GPIO_Init+0x1e4>
 800363c:	2305      	movs	r3, #5
 800363e:	e00a      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 8003640:	2306      	movs	r3, #6
 8003642:	e008      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 8003644:	2304      	movs	r3, #4
 8003646:	e006      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 8003648:	2303      	movs	r3, #3
 800364a:	e004      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 800364c:	2302      	movs	r3, #2
 800364e:	e002      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_GPIO_Init+0x1fa>
 8003654:	2300      	movs	r3, #0
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	f002 0203 	and.w	r2, r2, #3
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	4093      	lsls	r3, r2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003666:	4937      	ldr	r1, [pc, #220]	; (8003744 <HAL_GPIO_Init+0x2e8>)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <HAL_GPIO_Init+0x300>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003698:	4a30      	ldr	r2, [pc, #192]	; (800375c <HAL_GPIO_Init+0x300>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800369e:	4b2f      	ldr	r3, [pc, #188]	; (800375c <HAL_GPIO_Init+0x300>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036c2:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_GPIO_Init+0x300>)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_GPIO_Init+0x300>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_GPIO_Init+0x300>)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_GPIO_Init+0x300>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003716:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_GPIO_Init+0x300>)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f ae9d 	bne.w	800346c <HAL_GPIO_Init+0x10>
  }
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40021000 	.word	0x40021000
 8003744:	40010000 	.word	0x40010000
 8003748:	48000400 	.word	0x48000400
 800374c:	48000800 	.word	0x48000800
 8003750:	48000c00 	.word	0x48000c00
 8003754:	48001000 	.word	0x48001000
 8003758:	48001400 	.word	0x48001400
 800375c:	40010400 	.word	0x40010400

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800377c:	e002      	b.n	8003784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f806 	bl	80037c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d141      	bne.n	800386a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d131      	bne.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037f4:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fa:	4a46      	ldr	r2, [pc, #280]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800380c:	4a41      	ldr	r2, [pc, #260]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2232      	movs	r2, #50	; 0x32
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	0c9b      	lsrs	r3, r3, #18
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382a:	e002      	b.n	8003832 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3b01      	subs	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d102      	bne.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f2      	bne.n	800382c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003846:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003852:	d158      	bne.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e057      	b.n	8003908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003858:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385e:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003868:	e04d      	b.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d141      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003872:	4b28      	ldr	r3, [pc, #160]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d131      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003880:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003886:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003890:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003898:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2232      	movs	r2, #50	; 0x32
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	4a1c      	ldr	r2, [pc, #112]	; (800391c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	3301      	adds	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b6:	e002      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d102      	bne.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f2      	bne.n	80038b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d112      	bne.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e011      	b.n	8003908 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038f4:	e007      	b.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003904:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40007000 	.word	0x40007000
 8003918:	20000000 	.word	0x20000000
 800391c:	431bde83 	.word	0x431bde83

08003920 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800392a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392e:	6093      	str	r3, [r2, #8]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40007000 	.word	0x40007000

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e306      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d075      	beq.n	8003a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395e:	4b97      	ldr	r3, [pc, #604]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003968:	4b94      	ldr	r3, [pc, #592]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x3e>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d002      	beq.n	8003984 <HAL_RCC_OscConfig+0x44>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d10b      	bne.n	800399c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	4b8d      	ldr	r3, [pc, #564]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d05b      	beq.n	8003a48 <HAL_RCC_OscConfig+0x108>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d157      	bne.n	8003a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e2e1      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x74>
 80039a6:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a84      	ldr	r2, [pc, #528]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e01d      	b.n	80039f0 <HAL_RCC_OscConfig+0xb0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x98>
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b7c      	ldr	r3, [pc, #496]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0xb0>
 80039d8:	4b78      	ldr	r3, [pc, #480]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a77      	ldr	r2, [pc, #476]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b75      	ldr	r3, [pc, #468]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a74      	ldr	r2, [pc, #464]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fa56 	bl	8001ea8 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe fa52 	bl	8001ea8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2a6      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0xc0>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fa42 	bl	8001ea8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fa3e 	bl	8001ea8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e292      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3a:	4b60      	ldr	r3, [pc, #384]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0xe8>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d075      	beq.n	8003b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_OscConfig+0x136>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_OscConfig+0x13c>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d11f      	bne.n	8003abc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x154>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e265      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	4946      	ldr	r1, [pc, #280]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa8:	4b45      	ldr	r3, [pc, #276]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe f9af 	bl	8001e10 <HAL_InitTick>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d043      	beq.n	8003b40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e251      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f9ea 	bl	8001ea8 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f9e6 	bl	8001ea8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e23a      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	492d      	ldr	r1, [pc, #180]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
 8003b0a:	e01a      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f9c6 	bl	8001ea8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fe f9c2 	bl	8001ea8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e216      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1e0>
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d041      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b56:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f99f 	bl	8001ea8 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6e:	f7fe f99b 	bl	8001ea8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e1ef      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <HAL_RCC_OscConfig+0x22e>
 8003b8e:	e020      	b.n	8003bd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f982 	bl	8001ea8 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba6:	e00d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe f97e 	bl	8001ea8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d906      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1d2      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc4:	4b8c      	ldr	r3, [pc, #560]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ea      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a6 	beq.w	8003d2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x2b4>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2b6>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6593      	str	r3, [r2, #88]	; 0x58
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c16:	4b79      	ldr	r3, [pc, #484]	; (8003dfc <HAL_RCC_OscConfig+0x4bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c22:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x4bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x4bc>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f93b 	bl	8001ea8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe f937 	bl	8001ea8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e18b      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c48:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0x4bc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_OscConfig+0x32e>
 8003c5c:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a65      	ldr	r2, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6c:	e024      	b.n	8003cb8 <HAL_RCC_OscConfig+0x378>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d110      	bne.n	8003c98 <HAL_RCC_OscConfig+0x358>
 8003c76:	4b60      	ldr	r3, [pc, #384]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c86:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x378>
 8003c98:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a52      	ldr	r2, [pc, #328]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe f8f2 	bl	8001ea8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe f8ee 	bl	8001ea8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e140      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x388>
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe f8db 	bl	8001ea8 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f8d7 	bl	8001ea8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e129      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ed      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d46:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fe f8aa 	bl	8001ea8 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d58:	f7fe f8a6 	bl	8001ea8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e0fa      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ef      	beq.n	8003d58 <HAL_RCC_OscConfig+0x418>
 8003d78:	e01b      	b.n	8003db2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d80:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fe f88d 	bl	8001ea8 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d92:	f7fe f889 	bl	8001ea8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0dd      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ef      	bne.n	8003d92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80d1 	beq.w	8003f5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	f000 808b 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d15e      	bne.n	8003e90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe f863 	bl	8001ea8 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e00c      	b.n	8003e00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fe f85f 	bl	8001ea8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d905      	bls.n	8003e00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0b3      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ec      	bne.n	8003de6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0c:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <HAL_RCC_OscConfig+0x62c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6a11      	ldr	r1, [r2, #32]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1c:	3a01      	subs	r2, #1
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e26:	0212      	lsls	r2, r2, #8
 8003e28:	4311      	orrs	r1, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e2e:	0852      	lsrs	r2, r2, #1
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0552      	lsls	r2, r2, #21
 8003e34:	4311      	orrs	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0652      	lsls	r2, r2, #25
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e46:	06d2      	lsls	r2, r2, #27
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4947      	ldr	r1, [pc, #284]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a44      	ldr	r2, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a41      	ldr	r2, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe f81e 	bl	8001ea8 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe f81a 	bl	8001ea8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e06e      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x530>
 8003e8e:	e066      	b.n	8003f5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a34      	ldr	r2, [pc, #208]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003eae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fff6 	bl	8001ea8 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fff2 	bl	8001ea8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e046      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x580>
 8003ede:	e03e      	b.n	8003f5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e039      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f003 0203 	and.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d12c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d123      	bne.n	8003f5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d11b      	bne.n	8003f5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d113      	bne.n	8003f5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	019f800c 	.word	0x019f800c

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e11e      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b91      	ldr	r3, [pc, #580]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d910      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b8e      	ldr	r3, [pc, #568]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	498c      	ldr	r1, [pc, #560]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e106      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d073      	beq.n	80040ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d129      	bne.n	8004020 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fcc:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0f4      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fdc:	f000 f99e 	bl	800431c <RCC_GetSysClockFreqFromPLLSource>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4a7c      	ldr	r2, [pc, #496]	; (80041d8 <HAL_RCC_ClockConfig+0x268>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d93f      	bls.n	800406a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fea:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d033      	beq.n	800406a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004006:	2b00      	cmp	r3, #0
 8004008:	d12f      	bne.n	800406a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800400a:	4b72      	ldr	r3, [pc, #456]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004012:	4a70      	ldr	r2, [pc, #448]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004018:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e024      	b.n	800406a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004028:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0c6      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0be      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004048:	f000 f8ce 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800404c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4a61      	ldr	r2, [pc, #388]	; (80041d8 <HAL_RCC_ClockConfig+0x268>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d909      	bls.n	800406a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	4a5d      	ldr	r2, [pc, #372]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004064:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4957      	ldr	r1, [pc, #348]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fd ff14 	bl	8001ea8 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd ff10 	bl	8001ea8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e095      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d023      	beq.n	8004100 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040e4:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4936      	ldr	r1, [pc, #216]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
 80040fe:	e008      	b.n	8004112 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d105      	bne.n	8004112 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004106:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800410c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004110:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004112:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d21d      	bcs.n	800415c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 020f 	bic.w	r2, r3, #15
 8004128:	4929      	ldr	r1, [pc, #164]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004130:	f7fd feba 	bl	8001ea8 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	e00a      	b.n	800414e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004138:	f7fd feb6 	bl	8001ea8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e03b      	b.n	80041c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCC_ClockConfig+0x260>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d1ed      	bne.n	8004138 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4917      	ldr	r1, [pc, #92]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490f      	ldr	r1, [pc, #60]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800419a:	f000 f825 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800419e:	4602      	mov	r2, r0
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_ClockConfig+0x264>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	490c      	ldr	r1, [pc, #48]	; (80041dc <HAL_RCC_ClockConfig+0x26c>)
 80041ac:	5ccb      	ldrb	r3, [r1, r3]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	fa22 f303 	lsr.w	r3, r2, r3
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x270>)
 80041b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_RCC_ClockConfig+0x274>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fe26 	bl	8001e10 <HAL_InitTick>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	04c4b400 	.word	0x04c4b400
 80041dc:	08006410 	.word	0x08006410
 80041e0:	20000000 	.word	0x20000000
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e047      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d102      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e03e      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d136      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3301      	adds	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d10c      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800423c:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004246:	68d2      	ldr	r2, [r2, #12]
 8004248:	0a12      	lsrs	r2, r2, #8
 800424a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
      break;
 8004254:	e00c      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004260:	68d2      	ldr	r2, [r2, #12]
 8004262:	0a12      	lsrs	r2, r2, #8
 8004264:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
      break;
 800426e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0e5b      	lsrs	r3, r3, #25
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e001      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004290:	693b      	ldr	r3, [r7, #16]
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	016e3600 	.word	0x016e3600

080042ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4904      	ldr	r1, [pc, #16]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	08006420 	.word	0x08006420

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f4:	f7ff ffda 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0adb      	lsrs	r3, r3, #11
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	08006420 	.word	0x08006420

0800431c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	091b      	lsrs	r3, r3, #4
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10c      	bne.n	800435a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434a:	68d2      	ldr	r2, [r2, #12]
 800434c:	0a12      	lsrs	r2, r2, #8
 800434e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
    break;
 8004358:	e00c      	b.n	8004374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	0a12      	lsrs	r2, r2, #8
 8004368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    break;
 8004372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0e5b      	lsrs	r3, r3, #25
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800438e:	687b      	ldr	r3, [r7, #4]
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40021000 	.word	0x40021000
 80043a0:	016e3600 	.word	0x016e3600
 80043a4:	00f42400 	.word	0x00f42400

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043b0:	2300      	movs	r3, #0
 80043b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b4:	2300      	movs	r3, #0
 80043b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8098 	beq.w	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	4a3f      	ldr	r2, [pc, #252]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	; 0x58
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f2:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a39      	ldr	r2, [pc, #228]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043fe:	f7fd fd53 	bl	8001ea8 <HAL_GetTick>
 8004402:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004404:	e009      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fd fd4f 	bl	8001ea8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d902      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	74fb      	strb	r3, [r7, #19]
        break;
 8004418:	e005      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441a:	4b30      	ldr	r3, [pc, #192]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ef      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d159      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d019      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fd fd0f 	bl	8001ea8 <HAL_GetTick>
 800448a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448c:	e00b      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fd fd0b 	bl	8001ea8 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d902      	bls.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	74fb      	strb	r3, [r7, #19]
            break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ec      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044d0:	e008      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	74bb      	strb	r3, [r7, #18]
 80044d6:	e005      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e4:	7c7b      	ldrb	r3, [r7, #17]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ea:	4ba7      	ldr	r3, [pc, #668]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	4aa6      	ldr	r2, [pc, #664]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004502:	4ba1      	ldr	r3, [pc, #644]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f023 0203 	bic.w	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	499d      	ldr	r1, [pc, #628]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004524:	4b98      	ldr	r3, [pc, #608]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 020c 	bic.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4995      	ldr	r1, [pc, #596]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004546:	4b90      	ldr	r3, [pc, #576]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	498c      	ldr	r1, [pc, #560]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004568:	4b87      	ldr	r3, [pc, #540]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	4984      	ldr	r1, [pc, #528]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	497b      	ldr	r1, [pc, #492]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ac:	4b76      	ldr	r3, [pc, #472]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	4973      	ldr	r1, [pc, #460]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ce:	4b6e      	ldr	r3, [pc, #440]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	496a      	ldr	r1, [pc, #424]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f0:	4b65      	ldr	r3, [pc, #404]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4962      	ldr	r1, [pc, #392]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004612:	4b5d      	ldr	r3, [pc, #372]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	4959      	ldr	r1, [pc, #356]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004634:	4b54      	ldr	r3, [pc, #336]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	4951      	ldr	r1, [pc, #324]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004656:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4948      	ldr	r1, [pc, #288]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004678:	4b43      	ldr	r3, [pc, #268]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	4940      	ldr	r1, [pc, #256]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004696:	d105      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004698:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	4932      	ldr	r1, [pc, #200]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ce:	d105      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d0:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a2c      	ldr	r2, [pc, #176]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d015      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	4924      	ldr	r1, [pc, #144]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004706:	d105      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004712:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473e:	d105      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4908      	ldr	r1, [pc, #32]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004776:	d109      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a02      	ldr	r2, [pc, #8]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004782:	60d3      	str	r3, [r2, #12]
 8004784:	e002      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	4926      	ldr	r1, [pc, #152]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b6:	d105      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	4918      	ldr	r1, [pc, #96]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a12      	ldr	r2, [pc, #72]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800480e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	490a      	ldr	r1, [pc, #40]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004834:	7cbb      	ldrb	r3, [r7, #18]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e042      	b.n	80048dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd f9c3 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2224      	movs	r2, #36	; 0x24
 8004872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fbba 	bl	8005000 <UART_SetConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e022      	b.n	80048dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 feaa 	bl	80055f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 ff31 	bl	800573c <UART_CheckIdleState>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d142      	bne.n	8004982 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_UART_Receive_DMA+0x24>
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e03b      	b.n	8004984 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Receive_DMA+0x36>
 8004916:	2302      	movs	r3, #2
 8004918:	e034      	b.n	8004984 <HAL_UART_Receive_DMA+0xa0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_UART_Receive_DMA+0xa8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01f      	beq.n	8004972 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d018      	beq.n	8004972 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	613b      	str	r3, [r7, #16]
   return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	69f9      	ldr	r1, [r7, #28]
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	61bb      	str	r3, [r7, #24]
   return(result);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e6      	bne.n	8004940 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	461a      	mov	r2, r3
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fff3 	bl	8005964 <UART_Start_Receive_DMA>
 800497e:	4603      	mov	r3, r0
 8004980:	e000      	b.n	8004984 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40008000 	.word	0x40008000

08004990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b0ba      	sub	sp, #232	; 0xe8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80049be:	4013      	ands	r3, r2
 80049c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d11b      	bne.n	8004a04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 82d6 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
      }
      return;
 8004a02:	e2d0      	b.n	8004fa6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 811f 	beq.w	8004c4c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a12:	4b8b      	ldr	r3, [pc, #556]	; (8004c40 <HAL_UART_IRQHandler+0x2b0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a1e:	4b89      	ldr	r3, [pc, #548]	; (8004c44 <HAL_UART_IRQHandler+0x2b4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8112 	beq.w	8004c4c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d011      	beq.n	8004a58 <HAL_UART_IRQHandler+0xc8>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_UART_IRQHandler+0xf8>
 8004a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2202      	movs	r2, #2
 8004a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x128>
 8004a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aae:	f043 0202 	orr.w	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ad0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	; (8004c40 <HAL_UART_IRQHandler+0x2b0>)
 8004ad6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aea:	f043 0208 	orr.w	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_UART_IRQHandler+0x196>
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 823c 	beq.w	8004faa <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04f      	beq.n	8004c2a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 ffd3 	bl	8005b36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d141      	bne.n	8004c22 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1d9      	bne.n	8004b9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_UART_IRQHandler+0x2b8>)
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd fc0c 	bl	800241c <HAL_DMA_Abort_IT>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c14:	4610      	mov	r0, r2
 8004c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e00f      	b.n	8004c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f9da 	bl	8004fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	e00b      	b.n	8004c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9d6 	bl	8004fd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e007      	b.n	8004c3a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9d2 	bl	8004fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c38:	e1b7      	b.n	8004faa <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3a:	bf00      	nop
    return;
 8004c3c:	e1b5      	b.n	8004faa <HAL_UART_IRQHandler+0x61a>
 8004c3e:	bf00      	nop
 8004c40:	10000001 	.word	0x10000001
 8004c44:	04000120 	.word	0x04000120
 8004c48:	08005de1 	.word	0x08005de1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 814a 	bne.w	8004eea <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8143 	beq.w	8004eea <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 813c 	beq.w	8004eea <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	f040 80b5 	bne.w	8004df4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8187 	beq.w	8004fae <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f080 817f 	bcs.w	8004fae <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8086 	bne.w	8004dd8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1da      	bne.n	8004ccc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e1      	bne.n	8004d16 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3308      	adds	r3, #8
 8004d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e3      	bne.n	8004d52 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e4      	bne.n	8004d98 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fac9 	bl	800236a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8fb 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df2:	e0dc      	b.n	8004fae <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80ce 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80c9 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e4      	bne.n	8004e20 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	623b      	str	r3, [r7, #32]
   return(result);
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e1      	bne.n	8004e56 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e4      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f880 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ee8:	e063      	b.n	8004fb2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <HAL_UART_IRQHandler+0x584>
 8004ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 ffa8 	bl	8005e62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f12:	e051      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d014      	beq.n	8004f4a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03a      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
    }
    return;
 8004f48:	e035      	b.n	8004fb6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <HAL_UART_IRQHandler+0x5da>
 8004f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 ff52 	bl	8005e0c <UART_EndTransmit_IT>
    return;
 8004f68:	e026      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x5fa>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 ff81 	bl	8005e8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f88:	e016      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x628>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da0c      	bge.n	8004fb8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 ff69 	bl	8005e76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fa4:	e008      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004fa6:	bf00      	nop
 8004fa8:	e006      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
    return;
 8004faa:	bf00      	nop
 8004fac:	e004      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
      return;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_UART_IRQHandler+0x628>
    return;
 8004fb6:	bf00      	nop
  }
}
 8004fb8:	37e8      	adds	r7, #232	; 0xe8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop

08004fc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005004:	b08c      	sub	sp, #48	; 0x30
 8005006:	af00      	add	r7, sp, #0
 8005008:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4313      	orrs	r3, r2
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4baa      	ldr	r3, [pc, #680]	; (80052d8 <UART_SetConfig+0x2d8>)
 8005030:	4013      	ands	r3, r2
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005038:	430b      	orrs	r3, r1
 800503a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a9f      	ldr	r2, [pc, #636]	; (80052dc <UART_SetConfig+0x2dc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005068:	4313      	orrs	r3, r2
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005076:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005080:	430b      	orrs	r3, r1
 8005082:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f023 010f 	bic.w	r1, r3, #15
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a90      	ldr	r2, [pc, #576]	; (80052e0 <UART_SetConfig+0x2e0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d125      	bne.n	80050f0 <UART_SetConfig+0xf0>
 80050a4:	4b8f      	ldr	r3, [pc, #572]	; (80052e4 <UART_SetConfig+0x2e4>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d81a      	bhi.n	80050e8 <UART_SetConfig+0xe8>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0xb8>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e116      	b.n	80052fe <UART_SetConfig+0x2fe>
 80050d0:	2302      	movs	r3, #2
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d6:	e112      	b.n	80052fe <UART_SetConfig+0x2fe>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050de:	e10e      	b.n	80052fe <UART_SetConfig+0x2fe>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e6:	e10a      	b.n	80052fe <UART_SetConfig+0x2fe>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ee:	e106      	b.n	80052fe <UART_SetConfig+0x2fe>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a7c      	ldr	r2, [pc, #496]	; (80052e8 <UART_SetConfig+0x2e8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d138      	bne.n	800516c <UART_SetConfig+0x16c>
 80050fa:	4b7a      	ldr	r3, [pc, #488]	; (80052e4 <UART_SetConfig+0x2e4>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d82d      	bhi.n	8005164 <UART_SetConfig+0x164>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x110>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005145 	.word	0x08005145
 8005114:	08005165 	.word	0x08005165
 8005118:	08005165 	.word	0x08005165
 800511c:	08005165 	.word	0x08005165
 8005120:	08005155 	.word	0x08005155
 8005124:	08005165 	.word	0x08005165
 8005128:	08005165 	.word	0x08005165
 800512c:	08005165 	.word	0x08005165
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005165 	.word	0x08005165
 8005138:	08005165 	.word	0x08005165
 800513c:	08005165 	.word	0x08005165
 8005140:	0800515d 	.word	0x0800515d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514a:	e0d8      	b.n	80052fe <UART_SetConfig+0x2fe>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005152:	e0d4      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515a:	e0d0      	b.n	80052fe <UART_SetConfig+0x2fe>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005162:	e0cc      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516a:	e0c8      	b.n	80052fe <UART_SetConfig+0x2fe>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5e      	ldr	r2, [pc, #376]	; (80052ec <UART_SetConfig+0x2ec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d125      	bne.n	80051c2 <UART_SetConfig+0x1c2>
 8005176:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <UART_SetConfig+0x2e4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005180:	2b30      	cmp	r3, #48	; 0x30
 8005182:	d016      	beq.n	80051b2 <UART_SetConfig+0x1b2>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d818      	bhi.n	80051ba <UART_SetConfig+0x1ba>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d00a      	beq.n	80051a2 <UART_SetConfig+0x1a2>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d814      	bhi.n	80051ba <UART_SetConfig+0x1ba>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <UART_SetConfig+0x19a>
 8005194:	2b10      	cmp	r3, #16
 8005196:	d008      	beq.n	80051aa <UART_SetConfig+0x1aa>
 8005198:	e00f      	b.n	80051ba <UART_SetConfig+0x1ba>
 800519a:	2300      	movs	r3, #0
 800519c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a0:	e0ad      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051a2:	2302      	movs	r3, #2
 80051a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a8:	e0a9      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051aa:	2304      	movs	r3, #4
 80051ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b0:	e0a5      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051b2:	2308      	movs	r3, #8
 80051b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b8:	e0a1      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051ba:	2310      	movs	r3, #16
 80051bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c0:	e09d      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a4a      	ldr	r2, [pc, #296]	; (80052f0 <UART_SetConfig+0x2f0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d125      	bne.n	8005218 <UART_SetConfig+0x218>
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <UART_SetConfig+0x2e4>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051d6:	2bc0      	cmp	r3, #192	; 0xc0
 80051d8:	d016      	beq.n	8005208 <UART_SetConfig+0x208>
 80051da:	2bc0      	cmp	r3, #192	; 0xc0
 80051dc:	d818      	bhi.n	8005210 <UART_SetConfig+0x210>
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d00a      	beq.n	80051f8 <UART_SetConfig+0x1f8>
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d814      	bhi.n	8005210 <UART_SetConfig+0x210>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <UART_SetConfig+0x1f0>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d008      	beq.n	8005200 <UART_SetConfig+0x200>
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x210>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f6:	e082      	b.n	80052fe <UART_SetConfig+0x2fe>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fe:	e07e      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	e07a      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520e:	e076      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005216:	e072      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	; (80052f4 <UART_SetConfig+0x2f4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d12a      	bne.n	8005278 <UART_SetConfig+0x278>
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <UART_SetConfig+0x2e4>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005230:	d01a      	beq.n	8005268 <UART_SetConfig+0x268>
 8005232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005236:	d81b      	bhi.n	8005270 <UART_SetConfig+0x270>
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	d00c      	beq.n	8005258 <UART_SetConfig+0x258>
 800523e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005242:	d815      	bhi.n	8005270 <UART_SetConfig+0x270>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <UART_SetConfig+0x250>
 8005248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x260>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x270>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e052      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e04e      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e04a      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e046      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e042      	b.n	80052fe <UART_SetConfig+0x2fe>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a17      	ldr	r2, [pc, #92]	; (80052dc <UART_SetConfig+0x2dc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d13a      	bne.n	80052f8 <UART_SetConfig+0x2f8>
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <UART_SetConfig+0x2e4>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800528c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005290:	d01a      	beq.n	80052c8 <UART_SetConfig+0x2c8>
 8005292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005296:	d81b      	bhi.n	80052d0 <UART_SetConfig+0x2d0>
 8005298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529c:	d00c      	beq.n	80052b8 <UART_SetConfig+0x2b8>
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	d815      	bhi.n	80052d0 <UART_SetConfig+0x2d0>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <UART_SetConfig+0x2b0>
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d008      	beq.n	80052c0 <UART_SetConfig+0x2c0>
 80052ae:	e00f      	b.n	80052d0 <UART_SetConfig+0x2d0>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e022      	b.n	80052fe <UART_SetConfig+0x2fe>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e01e      	b.n	80052fe <UART_SetConfig+0x2fe>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e01a      	b.n	80052fe <UART_SetConfig+0x2fe>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e016      	b.n	80052fe <UART_SetConfig+0x2fe>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e012      	b.n	80052fe <UART_SetConfig+0x2fe>
 80052d8:	cfff69f3 	.word	0xcfff69f3
 80052dc:	40008000 	.word	0x40008000
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40004800 	.word	0x40004800
 80052f0:	40004c00 	.word	0x40004c00
 80052f4:	40005000 	.word	0x40005000
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4aae      	ldr	r2, [pc, #696]	; (80055bc <UART_SetConfig+0x5bc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	f040 8097 	bne.w	8005438 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800530a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800530e:	2b08      	cmp	r3, #8
 8005310:	d823      	bhi.n	800535a <UART_SetConfig+0x35a>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <UART_SetConfig+0x318>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800535b 	.word	0x0800535b
 8005320:	08005345 	.word	0x08005345
 8005324:	0800535b 	.word	0x0800535b
 8005328:	0800534b 	.word	0x0800534b
 800532c:	0800535b 	.word	0x0800535b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800535b 	.word	0x0800535b
 8005338:	08005353 	.word	0x08005353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fe ffc2 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005342:	e010      	b.n	8005366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005344:	4b9e      	ldr	r3, [pc, #632]	; (80055c0 <UART_SetConfig+0x5c0>)
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005348:	e00d      	b.n	8005366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fe ff4d 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800534e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8130 	beq.w	80055ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4a94      	ldr	r2, [pc, #592]	; (80055c4 <UART_SetConfig+0x5c4>)
 8005374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005378:	461a      	mov	r2, r3
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005380:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	429a      	cmp	r2, r3
 8005390:	d305      	bcc.n	800539e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	429a      	cmp	r2, r3
 800539c:	d903      	bls.n	80053a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053a4:	e113      	b.n	80055ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2200      	movs	r2, #0
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	60fa      	str	r2, [r7, #12]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	4a84      	ldr	r2, [pc, #528]	; (80055c4 <UART_SetConfig+0x5c4>)
 80053b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2200      	movs	r2, #0
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053c8:	f7fb fba4 	bl	8000b14 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	020b      	lsls	r3, r1, #8
 80053de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053e2:	0202      	lsls	r2, r0, #8
 80053e4:	6979      	ldr	r1, [r7, #20]
 80053e6:	6849      	ldr	r1, [r1, #4]
 80053e8:	0849      	lsrs	r1, r1, #1
 80053ea:	2000      	movs	r0, #0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4605      	mov	r5, r0
 80053f0:	eb12 0804 	adds.w	r8, r2, r4
 80053f4:	eb43 0905 	adc.w	r9, r3, r5
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	469a      	mov	sl, r3
 8005400:	4693      	mov	fp, r2
 8005402:	4652      	mov	r2, sl
 8005404:	465b      	mov	r3, fp
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb fb83 	bl	8000b14 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4613      	mov	r3, r2
 8005414:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800541c:	d308      	bcc.n	8005430 <UART_SetConfig+0x430>
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	d204      	bcs.n	8005430 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e0ce      	b.n	80055ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005436:	e0ca      	b.n	80055ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005440:	d166      	bne.n	8005510 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005446:	2b08      	cmp	r3, #8
 8005448:	d827      	bhi.n	800549a <UART_SetConfig+0x49a>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x450>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549b 	.word	0x0800549b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800549b 	.word	0x0800549b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fe ff26 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547c:	f7fe ff38 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b4e      	ldr	r3, [pc, #312]	; (80055c0 <UART_SetConfig+0x5c0>)
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fe fead 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8090 	beq.w	80055ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4a44      	ldr	r2, [pc, #272]	; (80055c4 <UART_SetConfig+0x5c4>)
 80054b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c0:	005a      	lsls	r2, r3, #1
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	441a      	add	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d916      	bls.n	8005508 <UART_SetConfig+0x508>
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d212      	bcs.n	8005508 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f023 030f 	bic.w	r3, r3, #15
 80054ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	8bfb      	ldrh	r3, [r7, #30]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	8bfa      	ldrh	r2, [r7, #30]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	e062      	b.n	80055ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800550e:	e05e      	b.n	80055ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005510:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005514:	2b08      	cmp	r3, #8
 8005516:	d828      	bhi.n	800556a <UART_SetConfig+0x56a>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x520>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	0800556b 	.word	0x0800556b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800556b 	.word	0x0800556b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005563 	.word	0x08005563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe febe 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800554a:	e014      	b.n	8005576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe fed0 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005552:	e010      	b.n	8005576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <UART_SetConfig+0x5c0>)
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005558:	e00d      	b.n	8005576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe fe45 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005560:	e009      	b.n	8005576 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005568:	e005      	b.n	8005576 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005574:	bf00      	nop
    }

    if (pclk != 0U)
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d028      	beq.n	80055ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <UART_SetConfig+0x5c4>)
 8005582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005586:	461a      	mov	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	fbb3 f2f2 	udiv	r2, r3, r2
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d910      	bls.n	80055c8 <UART_SetConfig+0x5c8>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d20c      	bcs.n	80055c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60da      	str	r2, [r3, #12]
 80055b8:	e009      	b.n	80055ce <UART_SetConfig+0x5ce>
 80055ba:	bf00      	nop
 80055bc:	40008000 	.word	0x40008000
 80055c0:	00f42400 	.word	0x00f42400
 80055c4:	08006438 	.word	0x08006438
      }
      else
      {
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2201      	movs	r2, #1
 80055da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2200      	movs	r2, #0
 80055e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3730      	adds	r7, #48	; 0x30
 80055f2:	46bd      	mov	sp, r7
 80055f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f6:	d10a      	bne.n	800570e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800574c:	f7fc fbac 	bl	8001ea8 <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b08      	cmp	r3, #8
 800575e:	d10e      	bne.n	800577e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f82f 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e025      	b.n	80057ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b04      	cmp	r3, #4
 800578a:	d10e      	bne.n	80057aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f819 	bl	80057d2 <UART_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00f      	b.n	80057ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b09c      	sub	sp, #112	; 0x70
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e2:	e0a9      	b.n	8005938 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	f000 80a5 	beq.w	8005938 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ee:	f7fc fb5b 	bl	8001ea8 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <UART_WaitOnFlagUntilTimeout+0x32>
 80057fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005800:	2b00      	cmp	r3, #0
 8005802:	d140      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005818:	667b      	str	r3, [r7, #100]	; 0x64
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005824:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e6      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	663b      	str	r3, [r7, #96]	; 0x60
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005856:	64ba      	str	r2, [r7, #72]	; 0x48
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800585c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e069      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d051      	beq.n	8005938 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d149      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
 80058ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e6      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3308      	adds	r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	613b      	str	r3, [r7, #16]
   return(result);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005900:	623a      	str	r2, [r7, #32]
 8005902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	61bb      	str	r3, [r7, #24]
   return(result);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e5      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e010      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	f43f af46 	beq.w	80057e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3770      	adds	r7, #112	; 0x70
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b096      	sub	sp, #88	; 0x58
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2222      	movs	r2, #34	; 0x22
 800598c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02c      	beq.n	80059f2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599c:	4a42      	ldr	r2, [pc, #264]	; (8005aa8 <UART_Start_Receive_DMA+0x144>)
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a4:	4a41      	ldr	r2, [pc, #260]	; (8005aac <UART_Start_Receive_DMA+0x148>)
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ac:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <UART_Start_Receive_DMA+0x14c>)
 80059ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b4:	2200      	movs	r2, #0
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3324      	adds	r3, #36	; 0x24
 80059c2:	4619      	mov	r1, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	461a      	mov	r2, r3
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	f7fc fc52 	bl	8002274 <HAL_DMA_Start_IT>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2210      	movs	r2, #16
 80059da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e055      	b.n	8005a9e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a16:	657b      	str	r3, [r7, #84]	; 0x54
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a54:	637a      	str	r2, [r7, #52]	; 0x34
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	613b      	str	r3, [r7, #16]
   return(result);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a88:	623a      	str	r2, [r7, #32]
 8005a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3758      	adds	r7, #88	; 0x58
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005c03 	.word	0x08005c03
 8005aac:	08005d29 	.word	0x08005d29
 8005ab0:	08005d61 	.word	0x08005d61

08005ab4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b08f      	sub	sp, #60	; 0x3c
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005adc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0e:	61ba      	str	r2, [r7, #24]
 8005b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6979      	ldr	r1, [r7, #20]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005b2a:	bf00      	nop
 8005b2c:	373c      	adds	r7, #60	; 0x3c
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b095      	sub	sp, #84	; 0x54
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e3      	bne.n	8005b70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d118      	bne.n	8005be2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f023 0310 	bic.w	r3, r3, #16
 8005bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	613b      	str	r3, [r7, #16]
   return(result);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e6      	bne.n	8005bb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005bf6:	bf00      	nop
 8005bf8:	3754      	adds	r7, #84	; 0x54
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b09c      	sub	sp, #112	; 0x70
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d171      	bne.n	8005d02 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c78:	647a      	str	r2, [r7, #68]	; 0x44
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cac:	633a      	str	r2, [r7, #48]	; 0x30
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d118      	bne.n	8005d02 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e6      	bne.n	8005cd0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d107      	bne.n	8005d1a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d10:	4619      	mov	r1, r3
 8005d12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d14:	f7ff f968 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d18:	e002      	b.n	8005d20 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d1c:	f7fb fd98 	bl	8001850 <HAL_UART_RxCpltCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3770      	adds	r7, #112	; 0x70
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d109      	bne.n	8005d52 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4619      	mov	r1, r3
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff f94c 	bl	8004fe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d50:	e002      	b.n	8005d58 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7fb fd71 	bl	800183a <HAL_UART_RxHalfCpltCallback>
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d109      	bne.n	8005da0 <UART_DMAError+0x40>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b21      	cmp	r3, #33	; 0x21
 8005d90:	d106      	bne.n	8005da0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff fe8a 	bl	8005ab4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d109      	bne.n	8005dc2 <UART_DMAError+0x62>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b22      	cmp	r3, #34	; 0x22
 8005db2:	d106      	bne.n	8005dc2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005dbc:	6978      	ldr	r0, [r7, #20]
 8005dbe:	f7ff feba 	bl	8005b36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc8:	f043 0210 	orr.w	r2, r3, #16
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd2:	6978      	ldr	r0, [r7, #20]
 8005dd4:	f7ff f8fe 	bl	8004fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dd8:	bf00      	nop
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff f8e8 	bl	8004fd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6979      	ldr	r1, [r7, #20]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e6      	bne.n	8005e14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff f8b3 	bl	8004fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5a:	bf00      	nop
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e027      	b.n	8005f04 <HAL_UARTEx_DisableFifoMode+0x66>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ee2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e02d      	b.n	8005f84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2224      	movs	r2, #36	; 0x24
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f84f 	bl	8006008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e02d      	b.n	8006000 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f811 	bl	8006008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006028:	e031      	b.n	800608e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800602a:	2308      	movs	r3, #8
 800602c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800602e:	2308      	movs	r3, #8
 8006030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	0e5b      	lsrs	r3, r3, #25
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	0f5b      	lsrs	r3, r3, #29
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	7b3a      	ldrb	r2, [r7, #12]
 8006056:	4911      	ldr	r1, [pc, #68]	; (800609c <UARTEx_SetNbDataToProcess+0x94>)
 8006058:	5c8a      	ldrb	r2, [r1, r2]
 800605a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800605e:	7b3a      	ldrb	r2, [r7, #12]
 8006060:	490f      	ldr	r1, [pc, #60]	; (80060a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006064:	fb93 f3f2 	sdiv	r3, r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	7b7a      	ldrb	r2, [r7, #13]
 8006074:	4909      	ldr	r1, [pc, #36]	; (800609c <UARTEx_SetNbDataToProcess+0x94>)
 8006076:	5c8a      	ldrb	r2, [r1, r2]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800607c:	7b7a      	ldrb	r2, [r7, #13]
 800607e:	4908      	ldr	r1, [pc, #32]	; (80060a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006082:	fb93 f3f2 	sdiv	r3, r3, r2
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	08006450 	.word	0x08006450
 80060a0:	08006458 	.word	0x08006458

080060a4 <atan2f>:
 80060a4:	f000 b800 	b.w	80060a8 <__ieee754_atan2f>

080060a8 <__ieee754_atan2f>:
 80060a8:	ee10 2a90 	vmov	r2, s1
 80060ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80060b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80060b4:	b510      	push	{r4, lr}
 80060b6:	eef0 7a40 	vmov.f32	s15, s0
 80060ba:	dc06      	bgt.n	80060ca <__ieee754_atan2f+0x22>
 80060bc:	ee10 0a10 	vmov	r0, s0
 80060c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80060c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80060c8:	dd04      	ble.n	80060d4 <__ieee754_atan2f+0x2c>
 80060ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80060ce:	eeb0 0a67 	vmov.f32	s0, s15
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80060d8:	d103      	bne.n	80060e2 <__ieee754_atan2f+0x3a>
 80060da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060de:	f000 b883 	b.w	80061e8 <atanf>
 80060e2:	1794      	asrs	r4, r2, #30
 80060e4:	f004 0402 	and.w	r4, r4, #2
 80060e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80060ec:	b943      	cbnz	r3, 8006100 <__ieee754_atan2f+0x58>
 80060ee:	2c02      	cmp	r4, #2
 80060f0:	d05e      	beq.n	80061b0 <__ieee754_atan2f+0x108>
 80060f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80061c4 <__ieee754_atan2f+0x11c>
 80060f6:	2c03      	cmp	r4, #3
 80060f8:	bf08      	it	eq
 80060fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80060fe:	e7e6      	b.n	80060ce <__ieee754_atan2f+0x26>
 8006100:	b941      	cbnz	r1, 8006114 <__ieee754_atan2f+0x6c>
 8006102:	eddf 7a31 	vldr	s15, [pc, #196]	; 80061c8 <__ieee754_atan2f+0x120>
 8006106:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80061cc <__ieee754_atan2f+0x124>
 800610a:	2800      	cmp	r0, #0
 800610c:	bfb8      	it	lt
 800610e:	eef0 7a40 	vmovlt.f32	s15, s0
 8006112:	e7dc      	b.n	80060ce <__ieee754_atan2f+0x26>
 8006114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006118:	d110      	bne.n	800613c <__ieee754_atan2f+0x94>
 800611a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800611e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006122:	d107      	bne.n	8006134 <__ieee754_atan2f+0x8c>
 8006124:	2c02      	cmp	r4, #2
 8006126:	d846      	bhi.n	80061b6 <__ieee754_atan2f+0x10e>
 8006128:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <__ieee754_atan2f+0x128>)
 800612a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800612e:	edd4 7a00 	vldr	s15, [r4]
 8006132:	e7cc      	b.n	80060ce <__ieee754_atan2f+0x26>
 8006134:	2c02      	cmp	r4, #2
 8006136:	d841      	bhi.n	80061bc <__ieee754_atan2f+0x114>
 8006138:	4b26      	ldr	r3, [pc, #152]	; (80061d4 <__ieee754_atan2f+0x12c>)
 800613a:	e7f6      	b.n	800612a <__ieee754_atan2f+0x82>
 800613c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006140:	d0df      	beq.n	8006102 <__ieee754_atan2f+0x5a>
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8006148:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800614c:	da1a      	bge.n	8006184 <__ieee754_atan2f+0xdc>
 800614e:	2a00      	cmp	r2, #0
 8006150:	da01      	bge.n	8006156 <__ieee754_atan2f+0xae>
 8006152:	313c      	adds	r1, #60	; 0x3c
 8006154:	db19      	blt.n	800618a <__ieee754_atan2f+0xe2>
 8006156:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800615a:	f000 f919 	bl	8006390 <fabsf>
 800615e:	f000 f843 	bl	80061e8 <atanf>
 8006162:	eef0 7a40 	vmov.f32	s15, s0
 8006166:	2c01      	cmp	r4, #1
 8006168:	d012      	beq.n	8006190 <__ieee754_atan2f+0xe8>
 800616a:	2c02      	cmp	r4, #2
 800616c:	d017      	beq.n	800619e <__ieee754_atan2f+0xf6>
 800616e:	2c00      	cmp	r4, #0
 8006170:	d0ad      	beq.n	80060ce <__ieee754_atan2f+0x26>
 8006172:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80061d8 <__ieee754_atan2f+0x130>
 8006176:	ee77 7a80 	vadd.f32	s15, s15, s0
 800617a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80061dc <__ieee754_atan2f+0x134>
 800617e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006182:	e7a4      	b.n	80060ce <__ieee754_atan2f+0x26>
 8006184:	eddf 7a10 	vldr	s15, [pc, #64]	; 80061c8 <__ieee754_atan2f+0x120>
 8006188:	e7ed      	b.n	8006166 <__ieee754_atan2f+0xbe>
 800618a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80061e0 <__ieee754_atan2f+0x138>
 800618e:	e7ea      	b.n	8006166 <__ieee754_atan2f+0xbe>
 8006190:	ee17 3a90 	vmov	r3, s15
 8006194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006198:	ee07 3a90 	vmov	s15, r3
 800619c:	e797      	b.n	80060ce <__ieee754_atan2f+0x26>
 800619e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80061d8 <__ieee754_atan2f+0x130>
 80061a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80061a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80061dc <__ieee754_atan2f+0x134>
 80061aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80061ae:	e78e      	b.n	80060ce <__ieee754_atan2f+0x26>
 80061b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80061dc <__ieee754_atan2f+0x134>
 80061b4:	e78b      	b.n	80060ce <__ieee754_atan2f+0x26>
 80061b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80061e4 <__ieee754_atan2f+0x13c>
 80061ba:	e788      	b.n	80060ce <__ieee754_atan2f+0x26>
 80061bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80061e0 <__ieee754_atan2f+0x138>
 80061c0:	e785      	b.n	80060ce <__ieee754_atan2f+0x26>
 80061c2:	bf00      	nop
 80061c4:	c0490fdb 	.word	0xc0490fdb
 80061c8:	3fc90fdb 	.word	0x3fc90fdb
 80061cc:	bfc90fdb 	.word	0xbfc90fdb
 80061d0:	08006460 	.word	0x08006460
 80061d4:	0800646c 	.word	0x0800646c
 80061d8:	33bbbd2e 	.word	0x33bbbd2e
 80061dc:	40490fdb 	.word	0x40490fdb
 80061e0:	00000000 	.word	0x00000000
 80061e4:	3f490fdb 	.word	0x3f490fdb

080061e8 <atanf>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	ee10 5a10 	vmov	r5, s0
 80061ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80061f2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80061f6:	eef0 7a40 	vmov.f32	s15, s0
 80061fa:	db10      	blt.n	800621e <atanf+0x36>
 80061fc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006200:	dd04      	ble.n	800620c <atanf+0x24>
 8006202:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006206:	eeb0 0a67 	vmov.f32	s0, s15
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8006344 <atanf+0x15c>
 8006210:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006348 <atanf+0x160>
 8006214:	2d00      	cmp	r5, #0
 8006216:	bfd8      	it	le
 8006218:	eef0 7a40 	vmovle.f32	s15, s0
 800621c:	e7f3      	b.n	8006206 <atanf+0x1e>
 800621e:	4b4b      	ldr	r3, [pc, #300]	; (800634c <atanf+0x164>)
 8006220:	429c      	cmp	r4, r3
 8006222:	dc10      	bgt.n	8006246 <atanf+0x5e>
 8006224:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006228:	da0a      	bge.n	8006240 <atanf+0x58>
 800622a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006350 <atanf+0x168>
 800622e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006236:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	dce2      	bgt.n	8006206 <atanf+0x1e>
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
 8006244:	e013      	b.n	800626e <atanf+0x86>
 8006246:	f000 f8a3 	bl	8006390 <fabsf>
 800624a:	4b42      	ldr	r3, [pc, #264]	; (8006354 <atanf+0x16c>)
 800624c:	429c      	cmp	r4, r3
 800624e:	dc4f      	bgt.n	80062f0 <atanf+0x108>
 8006250:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006254:	429c      	cmp	r4, r3
 8006256:	dc41      	bgt.n	80062dc <atanf+0xf4>
 8006258:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800625c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006260:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006264:	2300      	movs	r3, #0
 8006266:	ee30 0a27 	vadd.f32	s0, s0, s15
 800626a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006274:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006358 <atanf+0x170>
 8006278:	eddf 5a38 	vldr	s11, [pc, #224]	; 800635c <atanf+0x174>
 800627c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006360 <atanf+0x178>
 8006280:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006284:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006288:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006364 <atanf+0x17c>
 800628c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006290:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006368 <atanf+0x180>
 8006294:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006298:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800636c <atanf+0x184>
 800629c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80062a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006370 <atanf+0x188>
 80062a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80062a8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006374 <atanf+0x18c>
 80062ac:	eea6 5a87 	vfma.f32	s10, s13, s14
 80062b0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006378 <atanf+0x190>
 80062b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80062b8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800637c <atanf+0x194>
 80062bc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80062c0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006380 <atanf+0x198>
 80062c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80062c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80062cc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80062d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062d4:	d121      	bne.n	800631a <atanf+0x132>
 80062d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062da:	e794      	b.n	8006206 <atanf+0x1e>
 80062dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80062e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80062e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062e8:	2301      	movs	r3, #1
 80062ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80062ee:	e7be      	b.n	800626e <atanf+0x86>
 80062f0:	4b24      	ldr	r3, [pc, #144]	; (8006384 <atanf+0x19c>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	dc0b      	bgt.n	800630e <atanf+0x126>
 80062f6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80062fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062fe:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006302:	2302      	movs	r3, #2
 8006304:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	e7af      	b.n	800626e <atanf+0x86>
 800630e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006312:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006316:	2303      	movs	r3, #3
 8006318:	e7a9      	b.n	800626e <atanf+0x86>
 800631a:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <atanf+0x1a0>)
 800631c:	491b      	ldr	r1, [pc, #108]	; (800638c <atanf+0x1a4>)
 800631e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006322:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006326:	ed93 0a00 	vldr	s0, [r3]
 800632a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800632e:	ed92 0a00 	vldr	s0, [r2]
 8006332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006336:	2d00      	cmp	r5, #0
 8006338:	ee70 7a67 	vsub.f32	s15, s0, s15
 800633c:	bfb8      	it	lt
 800633e:	eef1 7a67 	vneglt.f32	s15, s15
 8006342:	e760      	b.n	8006206 <atanf+0x1e>
 8006344:	3fc90fdb 	.word	0x3fc90fdb
 8006348:	bfc90fdb 	.word	0xbfc90fdb
 800634c:	3edfffff 	.word	0x3edfffff
 8006350:	7149f2ca 	.word	0x7149f2ca
 8006354:	3f97ffff 	.word	0x3f97ffff
 8006358:	3c8569d7 	.word	0x3c8569d7
 800635c:	3d4bda59 	.word	0x3d4bda59
 8006360:	bd6ef16b 	.word	0xbd6ef16b
 8006364:	3d886b35 	.word	0x3d886b35
 8006368:	3dba2e6e 	.word	0x3dba2e6e
 800636c:	3e124925 	.word	0x3e124925
 8006370:	3eaaaaab 	.word	0x3eaaaaab
 8006374:	bd15a221 	.word	0xbd15a221
 8006378:	bd9d8795 	.word	0xbd9d8795
 800637c:	bde38e38 	.word	0xbde38e38
 8006380:	be4ccccd 	.word	0xbe4ccccd
 8006384:	401bffff 	.word	0x401bffff
 8006388:	08006478 	.word	0x08006478
 800638c:	08006488 	.word	0x08006488

08006390 <fabsf>:
 8006390:	ee10 3a10 	vmov	r3, s0
 8006394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006398:	ee00 3a10 	vmov	s0, r3
 800639c:	4770      	bx	lr
	...

080063a0 <__libc_init_array>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	4d0d      	ldr	r5, [pc, #52]	; (80063d8 <__libc_init_array+0x38>)
 80063a4:	4c0d      	ldr	r4, [pc, #52]	; (80063dc <__libc_init_array+0x3c>)
 80063a6:	1b64      	subs	r4, r4, r5
 80063a8:	10a4      	asrs	r4, r4, #2
 80063aa:	2600      	movs	r6, #0
 80063ac:	42a6      	cmp	r6, r4
 80063ae:	d109      	bne.n	80063c4 <__libc_init_array+0x24>
 80063b0:	4d0b      	ldr	r5, [pc, #44]	; (80063e0 <__libc_init_array+0x40>)
 80063b2:	4c0c      	ldr	r4, [pc, #48]	; (80063e4 <__libc_init_array+0x44>)
 80063b4:	f000 f820 	bl	80063f8 <_init>
 80063b8:	1b64      	subs	r4, r4, r5
 80063ba:	10a4      	asrs	r4, r4, #2
 80063bc:	2600      	movs	r6, #0
 80063be:	42a6      	cmp	r6, r4
 80063c0:	d105      	bne.n	80063ce <__libc_init_array+0x2e>
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c8:	4798      	blx	r3
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7ee      	b.n	80063ac <__libc_init_array+0xc>
 80063ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d2:	4798      	blx	r3
 80063d4:	3601      	adds	r6, #1
 80063d6:	e7f2      	b.n	80063be <__libc_init_array+0x1e>
 80063d8:	080064a0 	.word	0x080064a0
 80063dc:	080064a0 	.word	0x080064a0
 80063e0:	080064a0 	.word	0x080064a0
 80063e4:	080064a8 	.word	0x080064a8

080063e8 <memset>:
 80063e8:	4402      	add	r2, r0
 80063ea:	4603      	mov	r3, r0
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d100      	bne.n	80063f2 <memset+0xa>
 80063f0:	4770      	bx	lr
 80063f2:	f803 1b01 	strb.w	r1, [r3], #1
 80063f6:	e7f9      	b.n	80063ec <memset+0x4>

080063f8 <_init>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr

08006404 <_fini>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr
